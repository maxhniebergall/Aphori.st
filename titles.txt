Refactor to remove titles
===============================

Background:
- Titles were included in story trees to emulate other social media platforms & document structures
- Titles are included in the metadata for story trees (including unified nodes and feed items) in the backend
- There aren't any working tests, so we don't need to worry about updating them

``` typescript
export interface StoryMetadata {
    title?: string;
    author?: string;
    createdAt: string;
    quote: Quote | null;
}

export interface UnifiedNodeMetadata {
    parentId: string[] | null;
    quote?: Quote;
    author: string;
    createdAt: string;
    title?: string;
}

export interface FeedItem {
    id: string;
    title?: string;
    text: string;
    author: {
        id: string;
        email: string;
    };
    createdAt: string;
}
```

- We will need to update the migration script to migrate existing story trees in the database
  - For story trees with titles, prepend the title to the text content, with markdown formatting (`# Title\n\nContent`)
  - We should assume that after running the migration script, all of the data in the system will be in the new format, so we don't need to worry about handling old format data
- We will need to update the backend endpoints to remove titles from the metadata for all elements which have them
- We will need to update the frontend components to remove titles from the metadata
- We will need to update the seed data to remove titles
- We will need to update frontend components to remove titles nodes, rows, and components
  - Currently we are adding a special title node to the story tree, but we don't need to do that anymore
  - Any frontend code that creates a title node should be removed
  - The isTitleNode flag should be removed
  - The removal of titles nodes shouldn't impact the rendering of other nodes in the story tree, or the overall story tree structure
- We should completely remove title fields, we don't need to worry about versioning or BWC (except for the migration script)
- We are curently working in a development environment, so we can make these changes without worrying about production deployments or the production database.
  - Before we run the migration script on the production database, we will perform a back up of production data, and we will run the migration script on a copy of the production database. 
  - So, we don't need to worry about production data for now.

Title Node Locations in Codebase
===============================
Frontend Title Locations
--------------------

1. frontend/src/types/types.ts
   - Line 26: Title node definition in StoryTreeNode interface with isTitleNode?: boolean

2. frontend/src/components/TitleRow.tsx
   - Line 41: Title usage in metadata extraction (const title = storyTree?.metadata?.title || node?.textContent || 'Untitled')
   - Line 47: Title rendering in header component
   - This whole file can be removed

3. frontend/src/operators/StoryTreeOperator.ts
   - Line 43: Title node ID storage in titleNodeId property

4. frontend/src/components/StoryTreeHolder.tsx
   - Contains Header component which handles title display
   - Provides context for story tree that includes title information

5. frontend/src/components/StoryTreeLevel.tsx
   - Uses StoryTreeNode interface which includes the isTitleNode property
   - Renders nodes including title nodes through the NodeContent component

Note: The title node system is implemented as a special type of StoryTreeNode with the isTitleNode flag, 
managed through the StoryTreeOperator class. The actual display of titles is handled by the TitleRow component, 
while the node structure is defined in the types file. 

Backend Title Locations
--------------------

1. backend/types/index.ts
   - Line 55: Title field in StoryMetadata interface (title?: string)
   - Line 87: Title field in FeedItem interface (title?: string)
   - Line 132: Title field in UnifiedNodeMetadata interface (title?: string)

2. backend/server.ts
   - Line 621-625: Title handling in createStoryTree endpoint, storing title in metadata
   - Line 637-644: Title inclusion in feedItem creation and storage
   - Line 1001-1004: Title handling in combinedNode endpoint for unified node structure

3. backend/seed.js
   - Line 543: Title generation and storage in metadata during story creation
   - Line 552-554: Title inclusion in feed item creation
   - Line 608-610: Title storage in storyTree object structure

4. backend/migrate.ts
   - Line 35-39: Title field definition in OldStoryTree interface metadata

Note: In the backend, titles are consistently stored as part of metadata objects and are included in both the story tree 
and feed item structures. They are handled in creation endpoints, seeding operations, and retrieval endpoints, with 
optional typing (title?) throughout the type system. 