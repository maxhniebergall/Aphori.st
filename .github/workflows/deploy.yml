name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  SECRETS: ${{ secrets.CICD_PIPELINE_SECRETS }}
  DEPLOYMENT_NAME: aphorist
  FRONTEND_IMAGE: aphorist-frontend
  BACKEND_IMAGE: aphorist-backend
  REDIS_IMAGE: redis:alpine

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.SERVICE_ACCOUNT_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker
      run: |
        gcloud auth configure-docker

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ secrets.CLUSTER_NAME }}
        location: ${{ secrets.ZONE }}

    - name: Build Frontend Docker image
      run: |
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA -f frontend/Dockerfile.prod ./frontend

    - name: Build Backend Docker image
      run: |
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/$BACKEND_IMAGE:$GITHUB_SHA -f backend/Dockerfile.prod ./backend

    - name: Push Docker images
      run: |
        docker push gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA
        docker push gcr.io/${{ secrets.PROJECT_ID }}/$BACKEND_IMAGE:$GITHUB_SHA

    - name: Install cert-manager CRDs
      run: |
        kubectl apply -f k8s/cert-manager.crds.yaml

    - name: Install cert-manager
      run: |
        kubectl apply -f k8/scert-manager.yaml

    - name: Wait for cert-manager to be ready
      run: |
        kubectl rollout status deployment/cert-manager -n cert-manager
        kubectl rollout status deployment/cert-manager-webhook -n cert-manager
        kubectl rollout status deployment/cert-manager-cainjector -n cert-manager

    - name: Create backend secrets
      run: |
        kubectl create secret generic backend-secrets \
          --from-literal=EMAIL_HOST=${{ secrets.EMAIL_HOST }} \
          --from-literal=EMAIL_PORT=${{ secrets.EMAIL_PORT }} \
          --from-literal=EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }} \
          --from-literal=EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} \
          --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Apply Kubernetes configurations
      run: |
        # Apply Issuer and Ingress configurations
        kubectl apply -f k8s/issuer-lets-encrypt-production.yaml
        kubectl apply -f k8s/ingress.yaml

        # Apply other configurations
        kubectl apply -f k8s/persistent-volume.yaml || exit 1
        kubectl apply -f k8s/deployment.yaml || exit 1
        kubectl apply -f k8s/service.yaml || exit 1
        
        # Update images
        kubectl set image deployment/frontend \
          frontend=gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA || exit 1
        kubectl set image deployment/backend \
          backend=gcr.io/${{ secrets.PROJECT_ID }}/$BACKEND_IMAGE:$GITHUB_SHA || exit 1

    - name: Verify deployments
      timeout-minutes: 10
      run: |
        kubectl rollout status deployment/frontend || exit 1
        kubectl rollout status deployment/backend || exit 1