name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  SECRETS: ${{ secrets.CICD_PIPELINE_SECRETS }}
  DEPLOYMENT_NAME: aphorist
  FRONTEND_IMAGE: aphorist-frontend
  BACKEND_IMAGE: aphorist-backend
  REDIS_IMAGE: redis:alpine
  USE_GKE_GCLOUD_AUTH_PLUGIN: True

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.SERVICE_ACCOUNT_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ secrets.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure kubectl
      run: |
        gcloud components install gke-gcloud-auth-plugin
        gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.ZONE }}

    - name: Configure Docker
      run: |
        gcloud auth configure-docker

    - name: Build Frontend Docker image
      run: |
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA -f frontend/Dockerfile.prod ./frontend

    - name: Build Backend Docker image
      run: |
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/$BACKEND_IMAGE:$GITHUB_SHA -f backend/Dockerfile.prod ./backend

    - name: Push Docker images
      run: |
        docker push gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA
        docker push gcr.io/${{ secrets.PROJECT_ID }}/$BACKEND_IMAGE:$GITHUB_SHA

    - name: Create backend secrets
      run: |
        kubectl create secret generic backend-secrets \
          --from-literal=EMAIL_HOST=${{ secrets.EMAIL_HOST }} \
          --from-literal=EMAIL_PORT=${{ secrets.EMAIL_PORT }} \
          --from-literal=EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }} \
          --from-literal=EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }} \
          --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }} \
          --dry-run=client -o yaml | kubectl apply -f - --validate=false

    - name: Check cert-manager status
      run: |
        echo "Checking cert-manager pods..."
        kubectl get pods -n cert-manager
        
        echo "\nChecking cert-manager pod status..."
        kubectl describe pods -n cert-manager -l app=cert-manager | grep -A 5 "Status:"
        
        echo "\nChecking webhook pod status..."
        kubectl describe pods -n cert-manager -l app=webhook | grep -A 5 "Status:"
        
        echo "\nChecking webhook service status..."
        kubectl get service cert-manager-webhook -n cert-manager
        
        echo "\nChecking webhook endpoints..."
        kubectl get endpoints cert-manager-webhook -n cert-manager
        
        echo "\nChecking recent cert-manager events (last 5)..."
        kubectl get events -n cert-manager --sort-by='.lastTimestamp' | tail -n 5

    - name: Deploy to GKE
      run: |
        # Wait for cert-manager webhook to be ready
        echo "Waiting for cert-manager webhook..."
        if ! kubectl wait --for=condition=ready pod -l app=webhook -n cert-manager --timeout=60s; then
          echo "Webhook pod not ready. Checking pod status..."
          kubectl describe pod -n cert-manager -l app=webhook | grep -A 10 "Status:" | grep -v "Token"
          exit 1
        fi
        
        # Try to apply the issuer first to isolate any webhook issues
        echo "Applying cert-manager issuer..."
        if ! kubectl apply -f k8s/issuer-lets-encrypt-production.yaml; then
          echo "Failed to apply issuer. Checking webhook status..."
          kubectl get pods -n cert-manager -l app=webhook
          echo "Checking webhook readiness..."
          kubectl describe pod -n cert-manager -l app=webhook | grep -A 5 "Conditions:"
          exit 1
        fi
        
        # Apply remaining configurations
        echo "Applying remaining configurations..."
        kubectl apply -f k8s/
        
        # Update images
        kubectl set image deployment/frontend \
          frontend=gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA || exit 1
        kubectl set image deployment/backend \
          backend=gcr.io/${{ secrets.PROJECT_ID }}/$BACKEND_IMAGE:$GITHUB_SHA || exit 1

    - name: Verify deployments
      timeout-minutes: 10
      run: |
        kubectl rollout status deployment/frontend || exit 1
        kubectl rollout status deployment/backend || exit 1