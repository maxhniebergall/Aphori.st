name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ "main" ]

env:
  FRONTEND_IMAGE: aphorist-frontend
  BACKEND_IMAGE: aphorist-backend
  REGION: us-central1
  USE_GKE_GCLOUD_AUTH_PLUGIN: True
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  BACKEND_URL: "https://backend-132704325993.us-central1.run.app"
  FRONTEND_URL: "https://frontend-132704325993.us-central1.run.app"
  RUN_MIGRATION: true

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.SERVICE_ACCOUNT_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        project_id: ${{ secrets.PROJECT_ID }}

    - name: Configure Docker
      run: |
        gcloud auth configure-docker

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Set up Python for DVC
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Pull puzzle data from DVC
      run: |
        set -euo pipefail
        echo "Installing DVC..."
        python -m pip install 'dvc[gs]'
        echo "Pulling puzzle data from DVC..."
        cd scripts/datascience/themes_quality/wiki_puzzle_gemini_pipeline
        dvc pull data/outputs/gemini-puzzles_firebase.json data/outputs/gemini-puzzles.json
        echo "DVC puzzle data pulled successfully"
        echo "Available puzzle files:"
        ls -la data/outputs/

    - name: Run Database Migration - Upload Gemini Puzzles
      run: |
        echo "Discovering puzzle files..."
        
        # Search for puzzle files in expected locations
        DVC_PUZZLE_FILE=""
        
        # Priority order for file discovery
        CANDIDATE_FILES=(
          "scripts/datascience/themes_quality/wiki_puzzle_gemini_pipeline/data/outputs/gemini-puzzles_firebase.json"
          "scripts/puzzle-generation/gemini-puzzles_firebase.json"
        )
        
        # Also search for any firebase puzzle files in likely locations
        echo "Searching for puzzle files..."
        for pattern in "gemini-puzzles_firebase.json" "*puzzles_firebase.json"; do
          if [ -z "$DVC_PUZZLE_FILE" ]; then
            found_file=$(find scripts -name "$pattern" -type f 2>/dev/null | head -1)
            if [ -n "$found_file" ]; then
              DVC_PUZZLE_FILE="$found_file"
              break
            fi
          fi
        done
        
        # Check candidate files in priority order if not found by search
        if [ -z "$DVC_PUZZLE_FILE" ]; then
          for candidate in "${CANDIDATE_FILES[@]}"; do
            if [ -f "$candidate" ]; then
              DVC_PUZZLE_FILE="$candidate"
              break
            fi
          done
        fi
        
        if [ -n "$DVC_PUZZLE_FILE" ]; then
          echo "✅ Found puzzle file: $DVC_PUZZLE_FILE"
          echo "Running gemini puzzle upload to Firebase..."
          cd .database-migration-scripts
          echo "Installing dependencies..."
          npm ci
          echo "Running migration script with puzzle file: $DVC_PUZZLE_FILE"
          echo "Target name: gemini_50"
          node upload-puzzles.js --source-file "../$DVC_PUZZLE_FILE" --rename-to gemini_50
        else
          echo "❌ ERROR: No puzzle file found!"
          echo "Searched for puzzle files in the following locations:"
          echo "Candidate directories and their contents:"
          echo "1. scripts/datascience/themes_quality/wiki_puzzle_gemini_pipeline/data/outputs/:"
          ls -la scripts/datascience/themes_quality/wiki_puzzle_gemini_pipeline/data/outputs/ 2>/dev/null || echo "   Directory not found"
          echo "2. scripts/puzzle-generation/:"
          ls -la scripts/puzzle-generation/ 2>/dev/null || echo "   Directory not found"
          echo "3. scripts/datascience/themes_quality/puzzle_generation_output/:"
          ls -la scripts/datascience/themes_quality/puzzle_generation_output/ 2>/dev/null || echo "   Directory not found"
          echo "All JSON files in scripts/ tree:"
          find scripts -name "*.json" -type f 2>/dev/null | grep -E "(puzzle|gemini)" || echo "   No puzzle-related JSON files found"
          echo "Deployment failed - puzzle data is required for production deployment"
          exit 1
        fi
      env:
        FIREBASE_CREDENTIAL: '${{ secrets.SERVICE_ACCOUNT_KEY }}'
        THEMES_FIREBASE_DATABASE_URL: 'https://aphorist-themes-default-rtdb.firebaseio.com/?ns=aphorist-themes'

    - name: Build Frontend Docker image
      run: |
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA -f frontend/Dockerfile.prod ./frontend

    - name: Build Backend Docker image
      run: |
        docker build -t gcr.io/${{ secrets.PROJECT_ID }}/$BACKEND_IMAGE:$GITHUB_SHA -f backend/Dockerfile.prod ./backend --build-arg BACKEND_URL=$BACKEND_URL --build-arg FRONTEND_URL=$FRONTEND_URL --build-arg RUN_MIGRATION=$RUN_MIGRATION

    - name: Push Docker images
      run: |
        docker push gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA
        docker push gcr.io/${{ secrets.PROJECT_ID }}/$BACKEND_IMAGE:$GITHUB_SHA

    - name: Deploy Backend to Cloud Run
      run: |
        # Create env vars file with all necessary origins
        cat > env.yaml << EOF
        DB_TYPE: firebase
        NODE_ENV: production
        CORS_ORIGIN: "$FRONTEND_URL,https://aphorist.firebaseapp.com,https://aphorist.web.app,https://aphori.st,https://www.aphori.st,$BACKEND_URL"
        EOF
        
        echo "Environment configuration:"
        cat env.yaml
        
        gcloud run deploy backend \
          --image gcr.io/${{ secrets.PROJECT_ID }}/$BACKEND_IMAGE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --port 5000 \
          --env-vars-file env.yaml \
          --set-secrets "FIREBASE_CREDENTIAL=firebase-admin-key:latest,\
                        FIREBASE_DATABASE_URL=firebase-database-url:latest,\
                        EMAIL_HOST=EMAIL_HOST:latest,\
                        EMAIL_PORT=EMAIL_PORT:latest,\
                        EMAIL_USERNAME=EMAIL_USERNAME:latest,\
                        EMAIL_PASSWORD=EMAIL_PASSWORD:latest,\
                        MAGIC_LINK_SECRET=JWT_SECRET:latest,\
                        AUTH_TOKEN_SECRET=JWT_SECRET:latest,\
                        GEMINI_API_KEY=GEMINI_API_KEY:latest" \
          --allow-unauthenticated

    - name: Deploy Frontend to Cloud Run
      run: |
        # Build the frontend image with the backend URL
        docker build \
          --build-arg REACT_APP_API_URL=$BACKEND_URL \
          -t gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA \
          -f frontend/Dockerfile.prod ./frontend
        
        # Push the new image
        docker push gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA
        
        # Deploy to Cloud Run
        gcloud run deploy frontend \
          --image gcr.io/${{ secrets.PROJECT_ID }}/$FRONTEND_IMAGE:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --port 8080 \
          --timeout 300s \
          --cpu=1 \
          --memory=512Mi \
          --min-instances=1 \
          --allow-unauthenticated

    - name: Verify Deployment
      run: |
        echo "Frontend URL: $(gcloud run services describe frontend --platform managed --region $REGION --format 'value(status.url)')"
        echo "Backend URL: $(gcloud run services describe backend --platform managed --region $REGION --format 'value(status.url)')"
        
        # Test backend health
        curl -i "$BACKEND_URL/health"

    - name: Setup Firebase CLI
      run: npm install -g firebase-tools

    - name: Deploy Firebase Hosting
      run: firebase deploy --only hosting --project ${{ secrets.PROJECT_ID }}
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}