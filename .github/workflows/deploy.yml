name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).project_id }}
  GKE_CLUSTER: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).cluster_name }}
  GKE_ZONE: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).zone }}
  DEPLOYMENT_NAME: aphorist
  FRONTEND_IMAGE: aphorist-frontend
  BACKEND_IMAGE: aphorist-backend
  REDIS_IMAGE: redis:alpine

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).project_id }}
        service_account_key: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).service_account_key }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker
      run: |
        gcloud auth configure-docker

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).cluster_name }}
        location: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).zone }}

    - name: Build Frontend Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA -f frontend/Dockerfile.prod ./frontend

    - name: Build Backend Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA -f backend/Dockerfile.prod ./backend

    - name: Push Docker images
      run: |
        docker push gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA

    - name: Create backend secrets
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Secret
        metadata:
          name: backend-secrets
        type: Opaque
        data:
          EMAIL_HOST: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).email_host | b64enc }}
          EMAIL_PORT: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).email_port | b64enc }}
          EMAIL_USERNAME: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).email_username | b64enc }}
          EMAIL_PASSWORD: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).email_password | b64enc }}
          JWT_SECRET: ${{ fromJson(secrets.CICD_PIPELINE_SECRETS).jwt_secret | b64enc }}
        EOF

    - name: Apply Kubernetes configurations
      run: |
        # Apply persistent volume and deployments
        kubectl apply -f k8s/persistent-volume.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Update images
        kubectl set image deployment/frontend \
          frontend=gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA
        kubectl set image deployment/backend \
          backend=gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA

    - name: Verify deployments
      run: |
        kubectl rollout status deployment/frontend
        kubectl rollout status deployment/backend