name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  SECRETS: ${{ secrets.CICD_PIPELINE_SECRETS }}
  DEPLOYMENT_NAME: aphorist
  FRONTEND_IMAGE: aphorist-frontend
  BACKEND_IMAGE: aphorist-backend
  REDIS_IMAGE: redis:alpine

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Parse secrets
      id: secrets
      run: |
        echo "PROJECT_ID=$(echo '${{ secrets.CICD_PIPELINE_SECRETS }}' | jq -r .project_id)" >> $GITHUB_ENV
        echo "GKE_CLUSTER=$(echo '${{ secrets.CICD_PIPELINE_SECRETS }}' | jq -r .cluster_name)" >> $GITHUB_ENV
        echo "GKE_ZONE=$(echo '${{ secrets.CICD_PIPELINE_SECRETS }}' | jq -r .zone)" >> $GITHUB_ENV
        echo "SERVICE_ACCOUNT_KEY=$(echo '${{ secrets.CICD_PIPELINE_SECRETS }}' | jq -r .service_account_key)" >> $GITHUB_ENV

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_key: ${{ env.SERVICE_ACCOUNT_KEY }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker
      run: |
        gcloud auth configure-docker

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ secrets.CLUSTER_NAME }}
        location: ${{ secrets.ZONE }}

    - name: Build Frontend Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA -f frontend/Dockerfile.prod ./frontend

    - name: Build Backend Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA -f backend/Dockerfile.prod ./backend

    - name: Push Docker images
      run: |
        docker push gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA

    - name: Create backend secrets
      run: |
        kubectl create secret generic backend-secrets \
          --from-literal=EMAIL_HOST=$(echo -n "${{ secrets.EMAIL_HOST }}" | base64) \
          --from-literal=EMAIL_PORT=$(echo -n "${{ secrets.EMAIL_PORT }}" | base64) \
          --from-literal=EMAIL_USERNAME=$(echo -n "${{ secrets.EMAIL_USERNAME }}" | base64) \
          --from-literal=EMAIL_PASSWORD=$(echo -n "${{ secrets.EMAIL_PASSWORD }}" | base64) \
          --from-literal=JWT_SECRET=$(echo -n "${{ secrets.JWT_SECRET }}" | base64) \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Apply Kubernetes configurations
      run: |
        # Apply persistent volume and deployments
        kubectl apply -f k8s/persistent-volume.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Update images
        kubectl set image deployment/frontend \
          frontend=gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA
        kubectl set image deployment/backend \
          backend=gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA

    - name: Verify deployments
      run: |
        kubectl rollout status deployment/frontend
        kubectl rollout status deployment/backend