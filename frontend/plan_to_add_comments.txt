Core Functionality:
Users can select text while composing a reply through two methods:
1. Click/Tap: Selects the specific word clicked
Drag: Selects the text dragged over
Selection must be contiguous
Selection persists until reply submitted/cancelled
Selection can be modified using drag handles
Technical Requirements:
Selection State:
Store selection range data in StoryTree context
Track: source post ID, selection positions, quoted text
Associate with reply being composed
UI Components:
Highlight styling for selected text
Draggable handles at selection boundaries
Quote preview in reply composer
Visual indication that post is in "reply mode"
3. User Interaction:
Click on word → selects whole word
Drag over text → creates selection
Handles can be dragged to adjust selection
Selection persists when clicking elsewhere
Only one active selection per reply composition
Data Storage:
Quote metadata stored with reply in backend
Includes reference to source post and selection positions

Selection persists when clicking elsewhere
Only one active selection per reply composition
Data Storage:
Quote metadata stored with reply in backend
Includes reference to source post and selection positions
No newline at end of file
Includes reference to source post and selection positions

Phase 1: Selection State Management
Update StoryTreeContext to include selection state:
Add selection range data (start/end positions)
Track source post ID
Store quoted text
Track active reply state
Create Selection Helper Functions:
Word selection logic for click events
Range selection logic for drag events
Selection boundary calculations
Text extraction from selection

Phase 2: UI Components & Interaction
Post Component Updates:
Add click handlers for word selection
Implement drag selection functionality
Add "reply mode" visual state
Selection UI:
Create selection highlight styling
Implement drag handles component
Handle drag events for selection modification
Reply Composer Updates:
Add quote preview section
Connect to selection state
Handle selection persistence

Phase 3: Backend Integration
Update `backend/db/DatabaseClientInterface.js`:
  - Update the `StoryTree` interface to include `quotes`: Array of quote objects.
Update `backend/server.js`:
  - Modify the `/api/createReply` endpoint to accept quote metadata in the request body and store it with the reply.
  - Modify the `/api/getStoryTree/:uuid` endpoint to return the quote metadata with the story tree.

Phase 4: Displaying replies
 - When loading a story tree, replies are displayed, as either children or siblings of each node
 - When there are replies to a node, the text of the node that has quote replies is highlighted
 - When the user clicks on the highlighted text, the replies which quoted that text are displayed

Phase 5: Review backend storage schema
 - each storytreenode has a hashmap (keeping in mind we are using a nosql database, so everything is a hashmap) of replies:
   - the hashmap is keyed by the quote and the sorting criteria
   - the value is a queue/sorted-list of reply-keys
   - each reply/storytreenode is actually stored in the database as a reply object, keyed with UUID
 - schema allows for the storyTree/reply to have the quote in the key, therfore allowing us to get all of the replies to a quote
 - schema allows for multiple replies to a single node
 - the replies to nodes which are in the story tree are connected to the story tree
 - replies to replies are connected to the replies they are replying to, and trying to view them will open a new "replies" page
 - schema allows for multiple sorting criteria
 - criteria: the number of replies to the reply (recursive total)
 - criteria: the date the reply was created
 - criteria: the number of positive replies minus the number of negative replies
 - criteria: the quote that the reply is replying to


Phase 6: create "replies" page to view deep replies

Phase 7: update the UI to show the different levels of the story tree
 - all the intial posts are linked by a column on the left
 - the replies to the intitial posts are linked by a column on the left which is indented
 - attempting to view the replies to the replies will open a new "replies" page