Core Functionality:
Users can select text while composing a reply through two methods:
1. Click/Tap: Selects the specific word clicked
Drag: Selects the text dragged over
Selection must be contiguous
Selection persists until reply submitted/cancelled
Selection can be modified using drag handles
Technical Requirements:
Selection State:
Store selection range data in StoryTree context
Track: source post ID, selection positions, quoted text
Associate with reply being composed
UI Components:
Highlight styling for selected text
Draggable handles at selection boundaries
Quote preview in reply composer
Visual indication that post is in "reply mode"
3. User Interaction:
Click on word → selects whole word
Drag over text → creates selection
Handles can be dragged to adjust selection
Selection persists when clicking elsewhere
Only one active selection per reply composition
Data Storage:
Quote metadata stored with reply in backend
Includes reference to source post and selection positions

Phase 1: Selection State Management
Update StoryTreeContext to include selection state:
Add selection range data (start/end positions)
Track source post ID
Store quoted text
Track active reply state
Create Selection Helper Functions:
Word selection logic for click events
Range selection logic for drag events
Selection boundary calculations
Text extraction from selection

Phase 2: UI Components & Interaction
Post Component Updates:
Add click handlers for word selection
Implement drag selection functionality
Add "reply mode" visual state
Selection UI:
Create selection highlight styling
Implement drag handles component
Handle drag events for selection modification
Reply Composer Updates:
Add quote preview section
Connect to selection state
Handle selection persistence

Phase 3: Backend Integration
Update `backend/db/DatabaseClientInterface.js`:
  - Update the `StoryTree` interface to include `quotes`: Array of quote objects.
Update `backend/server.js`:
  - Modify the `/api/createReply` endpoint to accept quote metadata in the request body and store it with the reply.
  - Modify the `/api/getStoryTree/:uuid` endpoint to return the quote metadata with the story tree.

Phase 4: Review backend storage schema
- current schema for posts:
        ```
        const formattedStoryTree = {
            id: uuid,
            text: storyTree.content || storyTree.text, // Support both content and text fields
            nodes: nodes,
            parentId: storyTree.parentId || null, // null if it is a root node
            metadata: {
                title: storyTree.title,
                author: storyTree.author,
                authorId: req.user.id,
                authorEmail: req.user.email,
                createdAt: new Date().toISOString(),
                quote: storyTree.quote ? {
                    text: storyTree.quote.text,
                    sourcePostId: storyTree.quote.sourcePostId,
                    selectionRange: {
                        start: storyTree.quote.selectionRange.start,
                        end: storyTree.quote.selectionRange.end
                    }
                } : null
            },
            totalNodes: nodes.length
        };
        ```
- We need to refactor this schema seperate posts (storyTrees) from replies
- The new schema for posts will be:
        ```
        const formattedStoryTree = {
            id: uuid,
            text: storyTree.content || storyTree.text, // Support both content and text fields
            nodes: nodes, // the nodes are the paragraphs of the initial post. they are recursive first children. They are stored here as a list of nodes to improve performance when loading the story tree and to allow loading of replies
            parentId: null, // storyTrees will always be root nodes now
            metadata: {
                title: storyTree.title,
                author: storyTree.author,
                authorId: req.user.id,
                authorEmail: req.user.email,
                createdAt: new Date().toISOString(),
                quote: null // storyTrees will not have quotes
            },
            totalNodes: nodes.length
        };
        ```
- The new schema for replies will be:
        ```
        const replyObject = {
            id: uuid, // the ID for accessing the reply object
            quote: quote, // the quote that the reply is replying to, sometimes part of the key
            text: text, // the text of the reply
            parentId: [parentId], // the parentId is the ID of the post that the reply is replying to. This is a list because in the future, replies will be able to have multiple parents (i.e. a reply can be a reply to multiple storytreenodes/replies)
            metadata: {
                author: author,
                authorId: authorId,
                authorEmail: authorEmail,
                createdAt: new Date().toISOString()
            },
        };
        ```
- There will be several new schemas for accessing the replies:
    Each time a reply is created, it will be stored in the database as a reply object (keyed on UUID), and the UUID for the reply will be stored in several locations to allow for efficient access:
    - `/api/getReply/:uuid` 
      - will return the reply object
    - `/api/getReplies/:uuid/:quote:sortingCriteria` 
      - will return a queue of reply-keys for replies to the node (`:uuid`) which quoted with `:quote`. 
      - Thus, when inserting a reply to the node with `:uuid`, we insert the reply-key into the queue for each sorting criteria (initially the only sorting criteria will be `mostRecent` and `leastRecent`)
    - `/api/getRepliesFeed`
      - will return a queue of reply-keys for all replies to all nodes, sorted by `mostRecent`
    - `/api/getReplies/:quote/:sortingCriteria`
      - will return a queue of reply-keys for all replies to all nodes which quoted with `:quote`, sorted by `:sortingCriteria`

Phase 5: Displaying replies
 - When loading a story tree, replies are displayed, as either children or siblings of each node
 - When there are replies to a node, the text of the node that has quote replies is highlighted
 - When the user clicks on the highlighted text, the replies which quoted that text are displayed

Phase 6: create "replies" page to view deep replies

Phase 7: update the UI to show the different levels of the story tree
 - all the intial posts are linked by a column on the left
 - the replies to the intitial posts are linked by a column on the left which is indented
 - attempting to view the replies to the replies will open a new "replies" page

Phase 8: add additional sorting criteria
 - criteria: the number of replies to the reply (recursive total)
 - criteria: the number of positive replies minus the number of negative replies
 - criteria: the quote that the reply is replying to