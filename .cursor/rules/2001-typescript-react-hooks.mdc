---
description:  ENFORCE consistent documentation standards for TypeScript React hooks to ENSURE maintainable and self-documenting code
globs: src/**/*.{ts,tsx}
---
tags: [typescript, react, hooks, documentation, jsdoc]
priority: 2
version: 1.0.0
---

# TypeScript React Hooks Documentation Standard

## Context
- Applied to all custom React hooks in TypeScript files
- Hooks are identified by the 'use' prefix in function names
- Documentation must support IDE intellisense and type inference

## Requirements
- Start hook documentation with a clear, single-sentence summary
- Document all parameters using @param with types and descriptions
- Document return value using @returns with full type structure
- Include at least one usage example with @example
- Document generic type parameters with @template if used
- Document side effects or cleanup requirements if present
- Use markdown formatting within JSDoc comments for readability
- Keep examples concise and type-safe

## Examples

<example>
typescript
/
Manages async data fetching state with type safety.
@template T - The expected data type returned by the API
@param {string} url - The API endpoint URL to fetch from
@param {RequestInit} [options] - Optional fetch configuration
@returns {{
data: T | null;
loading: boolean;
error: Error | null;
}} Fetch state object
@example
function UserProfile() {
const { data, loading } = useFetch<User>('/api/user');
if (loading) return <Loading />;
return <div>{data?.name}</div>;
}
/
function useFetch<T>(url: string, options?: RequestInit) {
// Implementation
}
</example>

<example type="invalid">
typescript
// Missing type documentation and return value structure
/ Fetches data from an API /
function useFetch(url) {
// Implementation
}
</example>

<example type="invalid">
typescript
/
@param url The URL
@returns The data
/
function useFetch(url: string) {
// Implementation
}
</example>

## Additional Notes
- Ensure that all hooks are documented consistently to improve maintainability.
- Review documentation regularly to ensure it reflects the current implementation and usage.
